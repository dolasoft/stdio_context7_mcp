name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm run test:ci
      
    - name: Build project
      run: npm run build
      
    - name: Test Docker build
      run: |
        docker build -t stdio-context7-mcp:test .
        echo '{"jsonrpc": "2.0", "id": 1, "method": "tools/list", "params": {}}' | docker run -i stdio-context7-mcp:test

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/stdio-context7-mcp
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        provenance: true
        sbom: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Changelog
      run: |
        npm run changelog
        if [ -f CHANGELOG.md ]; then
          echo "## Changelog" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -50 CHANGELOG.md >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Build Release Assets
      run: |
        npm run build
        tar -czf stdio-context7-mcp-${GITHUB_REF_NAME}.tar.gz dist/ examples/ README.md package.json
        zip -r stdio-context7-mcp-${GITHUB_REF_NAME}.zip dist/ examples/ README.md package.json
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## What's New in ${{ github.ref_name }}
          
          This release includes the latest updates to the STDIO Context7 MCP Server.
          
          ### Installation
          
          **Docker (Recommended):**
          ```bash
          docker pull ${{ secrets.DOCKER_USERNAME }}/stdio-context7-mcp:${{ github.ref_name }}
          ```
          
          **From Source:**
          1. Download the release assets below
          2. Extract and run: `npm install && npm start`
          
          ### Docker Image
          - **Latest:** `${{ secrets.DOCKER_USERNAME }}/stdio-context7-mcp:latest`
          - **Tagged:** `${{ secrets.DOCKER_USERNAME }}/stdio-context7-mcp:${{ github.ref_name }}`
          
          ### Multi-Architecture Support
          - linux/amd64
          - linux/arm64  
          - linux/arm/v7
          
          ### Files Changed
          - Updated MCP server with latest Context7 API integration
          - Added Docker multi-arch support
          - Improved error handling and logging
          - Enhanced TypeScript configuration
          - Added comprehensive testing and CI/CD pipeline
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./stdio-context7-mcp-${{ github.ref_name }}.tar.gz
        asset_name: stdio-context7-mcp-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Release Assets (ZIP)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./stdio-context7-mcp-${{ github.ref_name }}.zip
        asset_name: stdio-context7-mcp-${{ github.ref_name }}.zip
        asset_content_type: application/zip
